# Log4j2 library log level
status = warn

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# REMEMBER - LOGGING KEY POINTS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# 1. Logs must be meaningful. Each event must be clear enough and useful + it must have a context
#    ex bad log: request successfully processed
#    ex good log: [order: 123456] [Product: abc123] [user: XY] [Flow: online-ordering] New product has been added to cart
# 2. Use the right log level
#    TRACE => for corner cases only, when you really need a lot of steps and information to understand a feature
#    DEBUG => for technical audience only
#    INFO  => for all team members. They must be in plain English, meaningful and ready for processing
#    WARN  => something went wrong but it was correctly treated (= business exception flow)
#    ERROR => something went wrong and it was not handled correctly (= unforeseen errors)
#    FATAL => system crash
# 3. Be ready for log parsing
#    Always use the same logging pattern and object orders. It will be easier to work with ELK
# 4. Do not hesitate to log too much rather than not enough
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#


# For logging patterns, see https://logging.apache.org/log4j/2.x/manual/layouts.html#PatternLayout


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# APPENDERS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

# Console appender
# (for developers only)
#################################
appender.console.type = Console
appender.console.name = ConsoleLog
appender.console.layout.type = PatternLayout
# standard output
appender.console.layout.pattern = [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%-20t] [%c{1}:%L] - %msg%n
# color output (highlight)
#appender.console.layout.pattern = %highlight{[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%-20t] [%c{1}:%L] - %msg%n}
appender.console.filter.threshold.type = ThresholdFilter
appender.console.filter.threshold.level = debug


# Files appender
##################################
# DEBUG file
# Use this file to really fine-tune the application and debug ongoing work
# (i) "debug" means "event information that is not needed for business tracking. This is mainly for technical purposes"
#     debug logs are for developers and technical personal
appender.file-debug.type = RollingFile
appender.file-debug.name = DebugLog
appender.file-debug.fileName = target/logs/app-debug.log
appender.file-debug.filePattern = target/logs/$${date:yyyy-MM-dd}/app-debug-%d{MM-dd-yyyy}-%i.log.gz
appender.file-debug.append = false
appender.file-debug.layout.type = PatternLayout
appender.file-debug.layout.pattern = [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%-20t] [%c{1}:%L] - %msg%n
appender.file-debug.policies.type = Policies
appender.file-debug.policies.time.type = TimeBasedTriggeringPolicy
appender.file-debug.policies.size.type = SizeBasedTriggeringPolicy
appender.file-debug.policies.size.size=10MB
appender.file-debug.strategy.type = DefaultRolloverStrategy
appender.file-debug.strategy.max = 5
appender.file-debug.filter.threshold.type = ThresholdFilter
appender.file-debug.filter.threshold.level = debug

# INFO file
# (i) "info" means "all BUSINESS events and key technical events (ex: batch execution report)"
#      INFO file should be understandable by any team member - developer, project manager, analyst, QA... even product owner!
appender.file-info.type = RollingFile
appender.file-info.name = InfoLog
appender.file-info.fileName = target/logs/app.log
appender.file-info.filePattern = target/logs/$${date:yyyy-MM-dd}/app-%d{MM-dd-yyyy}-%i.log.gz
appender.file-info.append = false
appender.file-info.layout.type = PatternLayout
appender.file-info.layout.pattern = [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%-20t] [%c{1}:%L] - %msg%n
appender.file-info.policies.type = Policies
appender.file-info.policies.time.type = TimeBasedTriggeringPolicy
appender.file-info.policies.size.type = SizeBasedTriggeringPolicy
appender.file-info.policies.size.size=10MB
appender.file-info.strategy.type = DefaultRolloverStrategy
appender.file-info.strategy.max = 3
appender.file-info.filter.threshold.type = ThresholdFilter
appender.file-info.filter.threshold.level = info

# ERROR file
# In production this file should be empty. If not, then you must act on each error ASAP
# (i) "error" means "an unexpected exception or event that is NOT handled at all and might let the application in an unknown state"
appender.file-error.type = RollingFile
appender.file-error.name = ErrorLog
appender.file-error.fileName = target/logs/app-error.log
appender.file-error.filePattern = target/logs/$${date:yyyy-MM-dd}/app-error-%d{MM-dd-yyyy}-%i.log.gz
appender.file-error.append = true
appender.file-error.layout.type = PatternLayout
appender.file-error.layout.pattern = [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%-20t] [%c{1}:%L] - %msg%n
appender.file-error.policies.type = Policies
appender.file-error.policies.time.type = TimeBasedTriggeringPolicy
appender.file-error.policies.size.type = SizeBasedTriggeringPolicy
appender.file-error.policies.size.size=15MB
appender.file-error.strategy.type = DefaultRolloverStrategy
appender.file-error.strategy.max = 2
appender.file-error.filter.threshold.type = ThresholdFilter
appender.file-error.filter.threshold.level = error

# 3rd parties
# To log events that are not coming from the application's code but from other sources
# ex: Spring, Hibernate, VertX, a very verbose inclusion, etc.
##################################
appender.file-third-parties.type = RollingFile
appender.file-third-parties.name = ThirdPartiesLog
appender.file-third-parties.fileName = target/logs/third-parties.log
appender.file-third-parties.filePattern = target/logs/$${date:yyyy-MM-dd}/third-parties-%d{MM-dd-yyyy}-%i.log.gz
appender.file-third-parties.append = false
appender.file-third-parties.layout.type = PatternLayout
appender.file-third-parties.layout.pattern = [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%-20t] [%c{1}:%L] - %msg%n
appender.file-third-parties.policies.type = Policies
appender.file-third-parties.policies.time.type = TimeBasedTriggeringPolicy
appender.file-third-parties.policies.size.type = SizeBasedTriggeringPolicy
appender.file-third-parties.policies.size.size=15MB
appender.file-third-parties.strategy.type = DefaultRolloverStrategy
appender.file-third-parties.strategy.max = 2
appender.file-third-parties.filter.threshold.type = ThresholdFilter
appender.file-third-parties.filter.threshold.level = warn



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# LOGGERS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

# Application events
logger.myapp.name = eu.daxiongmao.prv.construction
logger.myapp.level = debug
logger.myapp.additivity = false
logger.myapp.appenderRef.file-debug.ref = DebugLog
logger.myapp.appenderRef.file-info.ref = InfoLog
logger.myapp.appenderRef.file-error.ref = ErrorLog
logger.myapp.appenderRef.console.ref = ConsoleLog


# Log to console and rolling file
logger.vertx.name = io.vertx
logger.vertx.level = warn
logger.vertx.additivity = false
logger.vertx.appenderRef.file-third-parties.ref = ThirdPartiesLog
logger.vertx.appenderRef.file-error.ref = ErrorLog
logger.vertx.appenderRef.console.ref = ConsoleLog


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# ROOT (default)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#

rootLogger.level = info
rootLogger.appenderRef.stdout.ref = ConsoleLog
