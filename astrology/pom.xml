<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>eu.daxiongmao.prv</groupId>
    <artifactId>astrology</artifactId>
    <version>1.1.0-SNAPSHOT</version>
    <name>astrology</name>
    <description>Astrology application, to compute occidental and chinese zodiacs astral signs</description>

    <!-- Legal aspects -->
    <licenses>
        <license>
            <name>MIT License</name>
            <url>http://www.opensource.org/licenses/mit-license.php</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Guillaume Diaz</name>
            <email>guillaume@qin-diaz.com</email>
        </developer>
    </developers>

    <organization>
        <name>Daxiongmao.eu</name>
        <url>http://daxiongmao.eu/</url>
    </organization>

    <!-- Source code original location -->
    <scm>
        <url>https://github.com/guihome-diaz/java</url>
        <connection>scm:git:git@github.com:guihome-diaz/java.git</connection>
        <developerConnection>scm:git:git@github.com:guihome-diaz/java.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>11</java.version>
        <org.openjfx.version>11.0.2</org.openjfx.version>

        <!-- Program entry point -->
        <exec.mainClass>eu.daxiongmao.prv.astrology.AstrologyApp</exec.mainClass>
    </properties>


    <!-- ##################################################################### -->
    <!-- # Build configuration                                               # -->
    <!-- # java / javaFX versions, project resources, generate sources, etc. # -->
    <!-- ##################################################################### -->
    <build>
        <!-- Artifact name -->
        <finalName>astrology</finalName>

        <resources>
            <!-- copy fxml and css resources -->
            <resource>
                <filtering>false</filtering>
                <directory>${project.basedir}/src/main/java</directory>
                <includes>
                    <include>**/*.fxml</include>
                    <include>**/*.css</include>
                    <include>**/*.properties</include>
                </includes>
            </resource>
            <resource>
                <filtering>false</filtering>
                <directory>${project.basedir}/src/main/resources</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
            </resource>
            <resource>
                <directory>${project.basedir}/src/test/java</directory>
                <includes>
                    <include>**/*.fxml</include>
                    <include>**/*.css</include>
                    <include>**/*.properties</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <!-- Compilation settings -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <release>${java.version}</release>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <!-- advanced build settings, to see more info during compilation -->
                    <optimize>true</optimize>
                    <showDeprecation>true</showDeprecation>
                    <showWarnings>true</showWarnings>
                </configuration>
            </plugin>

            <!-- Generate source artifact to upload along the binaries, this help debug mode -->
            <!-- This is mandatory for publication on Maven Central -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- #### JavaFX 11+ bundling tool #### -->
            <!-- This plugin includes JLINK (to generate über-jar) + the command-line run options -->
            <!-- See https://github.com/openjfx/javafx-maven-plugin for complete details -->
            <!-- To run the application from command line: "mvn clean install && mvn javafx:run" -->
            <!-- To build a single jar (also called 'fat jar' or 'über-jar'): "mvn clean install && mvn javafx:jlink && ./target/astrology-app/bin/astrology" -->
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.3</version>
                <configuration>
                    <!-- Class to execute (either with uberJar, or "mvn javafx:run") -->
                    <mainClass>${exec.mainClass}</mainClass>
                    <!-- #### JLINK #### (über-jar settings) -->
                    <!-- Name of the module. A folder with that name will be generated in ./target/${jlinkImageName} -->
                    <jlinkImageName>astrology-app</jlinkImageName>
                    <!-- To create launchers for each environment (Win/Mac/Linux). They will be available as ./target/${jlinkImageName}/bin/${launcher} -->
                    <launcher>${project.build.finalName}</launcher>
                    <!-- To remove or not the includes directory in the resulting runtime image. Default: false -->
                    <noHeaderFiles>true</noHeaderFiles>
                    <!-- To removes the man directory in the resulting runtime image. -->
                    <noManPages>true</noManPages>
                    <!-- To create a ZIP archive of the JDK + application that you can easily distribute -->
                    <jlinkZipName>${project.build.finalName}-${project.version}</jlinkZipName>
                    <!-- Compression level of the generated archive. values: 0,1,2 ; default = 0 -->
                    <compress>2</compress>
                </configuration>
            </plugin>
        </plugins>
    </build>


    <dependencies>
        <!-- #### JavaFX #### -->
        <!-- Add dependencies over here, then update the 'module-info.java' file accordingly' -->
        <!-- JavaFX @FXML files -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${org.openjfx.version}</version>
        </dependency>
        <!-- JavaFX core and controls -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${org.openjfx.version}</version>
        </dependency>
        <!-- To add web support (ex: CSS, HTML) + browsing features -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-web</artifactId>
            <version>${org.openjfx.version}</version>
        </dependency>

        <!-- #### Logging #### -->
        <!-- This application uses Java9+ modules system and it requires a modular logging dependency, based on modular APIs -->
        <!-- Only SLF4J 1.8.0+ is modular. Therefore we must use the 1.3.0-ALPHA* releases of LogBack to use logging in modular applications -->
        <!-- You just have to adjust 'module-info.java' as follow: "requires org.slf4j;" -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.3.0-alpha4</version>
        </dependency>

        <!-- #### Testing #### -->
        <!-- No need of modules for testing libraries -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
</project>
