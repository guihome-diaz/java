# Application configuration
# These are the runtime settings
#---------------------------------

####################
#### Datasource ####
####################
# Oracle
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=daxiongmao_owner
spring.datasource.password=daxiongmao_owner
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver


####################
#### Hibernate #####
####################
# Dialect
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
# Disable Hibernate DDL. Schema and content will be managed by Flyway
# ... But we MUST LET VALIDATE to ensure Flyway did generate the correct DB schema
spring.jpa.hibernate.ddl-auto=validate
# Do not let Spring-boot execute "classpath:schema.sql" and "classpath:data.sql" scripts
spring.datasource.initialization-mode=never

#### Configure batches operations (up to ... save/delete/update at time)
# Batches size
#     >> Oracle users: you cannot insert more than 999 at a time
spring.jpa.properties.hibernate.jdbc.batch_size=900
# Tell Hibernate to take the time to group inserts by entity, creating larger batches.
spring.jpa.properties.hibernate.order_inserts=true
# Tell Hibernate to take the time to group updates by entity, creating larger batches.
spring.jpa.properties.hibernate.order_updates=true
# View SQL
spring.jpa.show-sql=false

#### Performances
# Disable Open Session in View (OSIV)
# The developer should take care of the database connection and lazy fetch association in @service / @Repository layers.
# Disabling this flag will mean that entity manager will NOT be available to @Controller layer.
# This is much better for performances reasons as it allows services to share a DB connection, but it means that no lazy fetch is allow in @Controller
spring.jpa.open-in-view=false

#### Flyway
# Do not let Flyway run automatically: this avoid issues on deployment.
spring.flyway.enabled=false
# Schema creation / data loading
spring.flyway.locations=classpath:db/migration,db/vendors/{vendor}

#######################
#### Web settings #####
#######################
# Do not use the default Spring Boot HTML "white label" page
server.error.whitelabel.enabled=false
# Throws "NoHandlerFoundException" on 404 or missing endpoint
spring.mvc.throw-exception-if-no-handler-found=true
# Removes default mapping to static pages to allow us to return JSON
#    (by default, Spring tries to find HTML page with the same name as a String returned from the Controller's method)
# => Do not send Tomcat 404 message but a custom one
spring.resources.add-mappings=false

